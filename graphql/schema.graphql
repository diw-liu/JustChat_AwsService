type User @aws_iam @aws_cognito_user_pools{
  UserId: String!
  UserName: String!
  Email: String!
}

# type Room {
#   roomId: ID!
#   messageId: ID!
#   sender: String!
#   status: Status!
# }

type Friend {
  UserId: String
  FriendId: String!
  Status: Status
  RoomId: String!
  CreatedTime: AWSDateTime
  UpdatedTime: AWSDateTime
  FriendInfo: User!
}

enum Status {
  REQUESTED
  PENDING
  FRIENDS
}

enum RequestType {
  ADD
  REMOVE
  APPROVE
  DISAPPROVE
}

type Query {
  getFriends: [Friend]
}

type Mutation {
  sendMessage(RoomId: String!, Message: String!): String!
  requestFriend(friendId: String!, type: RequestType!): String!
  publishMessage(input: MessageInput!): Message @aws_iam
  publishFriend(input: FriendInput!): FriendRequest @aws_iam
}

type Subscription {
  onPublishMessage(RoomId: String!): Message @aws_subscribe(mutations: ["publishMessage"])
  onPublishFriend(UserId: String!): FriendRequest @aws_subscribe(mutations: ["publishFriend"])
}

input FriendInput {
	UserId: String!
	FriendId: String!
	Status: Status
}

type FriendRequest @aws_iam{
	UserId: String
	FriendId: String
	Status: Status
	FriendInfo: User
}

input MessageInput {
  RoomId: String!
  MessageId: String
  AuthorId: String
  Content: String!
  CreatedTime: String
}

type Message @aws_iam{
  RoomId: String
  MessageId: String
  AuthorId: String
  Content: String
  CreatedTime: String
}

type MessageConnection {
  items: [Message]
  nextToken: String
}

